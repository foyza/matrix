import os
import logging
import asyncio
import httpx
import numpy as np
import pandas as pd
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart
from aiogram.client.default import DefaultBotProperties
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv
from sklearn.linear_model import LogisticRegression
import joblib

# ==================== –ù–ê–°–¢–†–û–ô–ö–ò ====================
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
API_KEY = os.getenv("TWELVEDATA_API_KEY")

logging.basicConfig(level=logging.INFO)

bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
user_settings = {}  # {uid: {"asset": ..., "muted": False}}

# ==================== –£–¢–ò–õ–ò–¢–´ ====================
def ensure_user(uid: int):
    if uid not in user_settings:
        user_settings[uid] = {"asset": "AAPL", "muted": False}

async def fetch_data(symbol: str = "AAPL", interval="1h", outputsize=100):
    url = f"https://api.twelvedata.com/time_series"
    params = {"symbol": symbol, "interval": interval, "apikey": API_KEY, "outputsize": outputsize}
    async with httpx.AsyncClient() as client:
        r = await client.get(url, params=params)
        data = r.json()
    if "values" not in data:
        return None
    df = pd.DataFrame(data["values"])
    df["close"] = df["close"].astype(float)
    df = df[::-1].reset_index(drop=True)
    return df

def apply_smc_logic(df: pd.DataFrame):
    """
    –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è Smart Money Concepts –ª–æ–≥–∏–∫–∞:
    - –∏—â–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å (—Å–∏–ª—å–Ω—ã–µ —ç–∫—Å—Ç—Ä–µ–º—É–º—ã)
    - —Å–º–æ—Ç—Ä–∏–º, –≥–¥–µ –±—ã–ª–∏ –∑–∞—Ö–≤–∞—Ç—ã –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
    - –µ—Å–ª–∏ —Ü–µ–Ω–∞ –≤—ã–Ω–æ—Å–∏–ª–∞ —Å—Ç–æ–ø—ã –∏ –≤–µ—Ä–Ω—É–ª–∞—Å—å ‚Äî —Å–∏–≥–Ω–∞–ª –≤ —Å—Ç–æ—Ä–æ–Ω—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    """
    if df is None or len(df) < 5:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    closes = df["close"].values
    last = closes[-1]
    prev = closes[-5:]

    high = np.max(prev)
    low = np.min(prev)

    if last > high:
        return "BUY (SMC: –∑–∞—Ö–≤–∞—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ —Å–≤–µ—Ä—Ö—É)"
    elif last < low:
        return "SELL (SMC: –∑–∞—Ö–≤–∞—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ —Å–Ω–∏–∑—É)"
    else:
        return "WAIT (SMC: –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞)"

def get_ml_signal(df: pd.DataFrame):
    """
    –ó–∞–≥–ª—É—à–∫–∞ ML ‚Äî –º–æ–∂–Ω–æ –æ–±—É—á–∞—Ç—å –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
    –°–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ LogisticRegression –Ω–∞ –ø—Ä–æ—Å—Ç—ã—Ö —Ñ–∏—á–∞—Ö.
    """
    closes = df["close"].values
    X = np.array([[closes[i] - closes[i-1]] for i in range(1, len(closes))])
    y = np.array([1 if closes[i] > closes[i-1] else 0 for i in range(1, len(closes))])

    if len(set(y)) < 2:
        return "WAIT (ML: –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ)"

    model = LogisticRegression()
    model.fit(X, y)
    pred = model.predict([[closes[-1] - closes[-2]]])[0]
    return "BUY (ML)" if pred == 1 else "SELL (ML)"

def get_signal(df: pd.DataFrame):
    smc = apply_smc_logic(df)
    ml = get_ml_signal(df)
    return f"{smc} | {ml}"

# ==================== –•–ï–ù–î–õ–ï–†–´ ====================
@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    uid = message.from_user.id
    ensure_user(uid)

    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üìà –°–∏–≥–Ω–∞–ª"))
    kb.add(KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
    kb.add(KeyboardButton("üîï –í–∫–ª/–í—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"))

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ üìä\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

@dp.message(lambda m: m.text == "üìà –°–∏–≥–Ω–∞–ª")
async def signal_cmd(message: types.Message):
    uid = message.from_user.id
    ensure_user(uid)

    asset = user_settings[uid]["asset"]
    df = await fetch_data(asset)
    sig = get_signal(df)
    await message.answer(f"–°–∏–≥–Ω–∞–ª –ø–æ {asset}: {sig}")

@dp.message(lambda m: m.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_cmd(message: types.Message):
    uid = message.from_user.id
    ensure_user(uid)

    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("AAPL"), KeyboardButton("BTC/USD"))
    kb.add(KeyboardButton("–ù–∞–∑–∞–¥"))

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤:", reply_markup=kb)

@dp.message(lambda m: m.text in ["AAPL", "BTC/USD"])
async def set_asset(message: types.Message):
    uid = message.from_user.id
    ensure_user(uid)
    user_settings[uid]["asset"] = message.text
    await message.answer(f"–ê–∫—Ç–∏–≤ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {message.text}")

@dp.message(lambda m: m.text == "–ù–∞–∑–∞–¥")
async def back_cmd(message: types.Message):
    uid = message.from_user.id
    ensure_user(uid)

    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üìà –°–∏–≥–Ω–∞–ª"))
    kb.add(KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
    kb.add(KeyboardButton("üîï –í–∫–ª/–í—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"))

    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é", reply_markup=kb)

@dp.message(lambda m: m.text == "üîï –í–∫–ª/–í—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def mute_cmd(message: types.Message):
    uid = message.from_user.id
    ensure_user(uid)

    user_settings[uid]["muted"] = not user_settings[uid]["muted"]
    status = "üîî –í–∫–ª—é—á–µ–Ω—ã" if not user_settings[uid]["muted"] else "üîï –í—ã–∫–ª—é—á–µ–Ω—ã"
    await message.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {status}")

# ==================== –†–ê–°–°–´–õ–ö–ê ====================
async def broadcast_signal():
    for uid, settings in list(user_settings.items()):
        if settings.get("muted"):
            continue
        asset = settings.get("asset", "AAPL")
        df = await fetch_data(asset)
        sig = get_signal(df)
        try:
            await bot.send_message(uid, f"–ê–≤—Ç–æ—Å–∏–≥–Ω–∞–ª –ø–æ {asset}: {sig}")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {uid}: {e}")

# ==================== MAIN ====================
async def main():
    scheduler = AsyncIOScheduler()
    scheduler.add_job(lambda: asyncio.create_task(broadcast_signal()), "interval", hours=1)
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
